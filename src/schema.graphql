"validar los tipos de niveles"
enum Level {
  principiante
  intermedio
  avanzado
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: Level
}

# interface permite agrupar diferentes tipos y relacionarlos con otros
# aqui relacionando Person con Student y Monitor
interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "devuelve la lista de todos los cursos"
  getCourses: [Course]
  "devuelve solo un curso por id"
  getCourse(id: ID!): Course
  getPeople: [Person]
  getPerson(id: ID!): Person
}

# input es una planilla de los datos que se reciben
input CourseInput {
  "el id es generado automaticamente por Mongo"
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input updateCourseInput {
  # ningun campo es obligatorio al actualizar
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input updatePersonInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "crear un nuevo curso"
  createCourse(input: CourseInput!): Course
  updateCourse(id: ID!, input: updateCourseInput): Course
  deleteCourse(id: ID!): String
  createPerson(input: PersonInput!): Person
  updatePerson(id: ID!, input: updatePersonInput): Person
  deletePerson(id: ID!): String
  # vincular una persona a un curso
  addPersonToCourse(courseId: ID!, personId: ID!): Course
}
